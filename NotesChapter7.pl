
% Definite Clause Grammars

% A language generated by a grammar consists of all the string that
% the grammar classifies as grammatical.

% A context free recognizer tells us if a string belongs to the language
% generated by the context free grammar.

% A context free parser is a program which correctly decides whether a string
% belongs to the language generated by a context free grammar and tells us what
% its structure is.

% Context free languages are the languages that can be developed from context
% free grammars. 

% CFG Recognition Using Append

% Recognizers are defined in prolog by creating clauses that correspond to 
% grammar rules.

  % To Initially model recognizers we shal use lists to represent strings
  % [a, woman, shoots, a, man]
  
  % (s -> np vp) Can be modelled as saying:
  % s is made out of np concatenated with vp
      
  %s(Z) :- np(X), vp(Y), append(X,Y,Z).
    
% Given this the grammar
  % s   -> np vp
  % np  -> det n
  % vp  -> v np
  % vp  -> v
  % det -> a
  % det -> the
  % n -> woman
  % n -> man
  % v -> shoots

% The prolog corresponding is as follows

  s(Z) :- np(X), vp(Y), append(X, Y, Z).
  np(Z) :- det(X), n(Y), append(X, Y, Z).
  vp(Z) :- v(X), np(Y), append(X, Y, Z).
  vp(Z) :- v(Z).

  det([a]).
  det([the]).

  n([woman]).
  n([man]).

  v([shoots]).

% CFG recognition using difference lists

  % Difference lists represent the informationabout grammatical categories not
  % as a single list but as the difference between two lists.

  % We can represent the sentence [a, woman, shoots, a, man] as

  [a, woman, shoots, a, man] [].

  % An input list (what needs to be consumed) and an output list (what we should leave behind)
  % If we consume all the symbols on the left and leace those to the right behind we will have
  % the symbols we are looking for.
  % The sentence we are interested in is the difference between the two sentences

  % alternatively:

  [a, woman, shoots, a, man, ploggle, woggle] [ploggle, woggle].

  % Applying this our recognizer becomes

  s(X, Z)   :- np(X, Y), vp(Y, Z).
  np(X, Z)  :- det(X, Y), n(Y, Z).
  vp(X, Z)  :- v(X, Y), np(Y, Z).
  vp(X, Z)  :- v(X, Z).

  det([a|W], W).
  det([the|W], W).

  n([woman|W], W).
  n([man|W], W).

  v([shoots|W], W).

  verify(X) :- s(X, []).